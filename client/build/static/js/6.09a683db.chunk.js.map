{"version":3,"sources":["components/checkout-item/checkout-item.styles.jsx","components/checkout-item/checkout-item.component.jsx","components/stripe-button/stripe-button.component.jsx","pages/checkout/checkout.styles.jsx","pages/checkout/checkout.component.jsx"],"names":["CheckoutItemContainer","styled","div","ImageContainer","TextContainer","span","QuantityContainer","RemoveButtonContainer","connect","dispatch","clearItem","cartItem","clearItemFromCart","addItem","item","removeItem","name","imageUrl","price","quantity","src","alt","onClick","StripeCheckoutButton","priceForStripe","label","billingAddress","shippingAddress","image","description","amount","panelLabel","token","axios","url","method","data","then","response","alert","catch","error","console","log","JSON","parse","stripeKey","CheckoutPageContainer","CheckoutHeaderContainer","HeaderBlockContainer","TotalContainer","mapStateToProps","createStructuredSelector","cartItems","selectCartItems","total","selectCartTotal","map","key","id"],"mappings":"g6BAEO,IAAMA,EAAwBC,IAAOC,IAAV,KAUrBC,EAAiBF,IAAOC,IAAV,KASdE,EAAgBH,IAAOI,KAAV,KAIbC,EAAoBL,YAAOG,EAAPH,CAAH,KAUjBM,EAAwBN,IAAOC,IAAV,KCWnBM,cAAQ,MANI,SAACC,GAAD,MAAe,CACxCC,UAAW,SAACC,GAAD,OAAcF,EAASG,YAAkBD,KACpDE,QAAS,SAACC,GAAD,OAAUL,EAASI,YAAQC,KACpCC,WAAY,SAACD,GAAD,OAAUL,EAASM,YAAWD,QAG7BN,EA3BM,SAAC,GAAkD,IAAhDG,EAA+C,EAA/CA,SAAUD,EAAqC,EAArCA,UAAWG,EAA0B,EAA1BA,QAASE,EAAiB,EAAjBA,WAC5CC,EAAoCL,EAApCK,KAAMC,EAA8BN,EAA9BM,SAAUC,EAAoBP,EAApBO,MAAOC,EAAaR,EAAbQ,SAC/B,OACE,kBAACnB,EAAD,KACE,kBAACG,EAAD,KACE,yBAAKiB,IAAKH,EAAUI,IAAI,UAE1B,kBAACjB,EAAD,KAAgBY,GAChB,kBAACV,EAAD,KACE,yBAAKgB,QAAS,kBAAMP,EAAWJ,KAA/B,UACA,8BAAOQ,GACP,yBAAKG,QAAS,kBAAMT,EAAQF,KAA5B,WAEF,kBAACP,EAAD,KAAgBc,GAChB,kBAACX,EAAD,CAAuBe,QAAS,kBAAMZ,EAAUC,KAAhD,c,mCCaSY,EAzCc,SAAC,GAAe,IAAbL,EAAY,EAAZA,MACxBM,EAAyB,IAARN,EAwBvB,OACE,kBAAC,IAAD,CACEO,MAAM,UACNT,KAAK,aACLU,gBAAc,EACdC,iBAAe,EACfC,MAAM,sCACNC,YAAW,yBAAoBX,GAC/BY,OAAQN,EACRO,WAAW,UACXC,MA9BY,SAACA,GACfC,IAAM,CACJC,IAAK,UACLC,OAAQ,OACRC,KAAM,CACJN,OAAQN,EACRQ,MAAOA,KAGRK,MAAK,SAACC,GACLC,MAAM,yBAEPC,OAAM,SAACC,GACNC,QAAQC,IAAI,kBAAmBC,KAAKC,MAAMJ,IAC1CF,MACE,+FAgBJO,UAjCF,iH,qvBCNG,IAAMC,EAAwB9C,IAAOC,IAAV,KAarB8C,EAA0B/C,IAAOC,IAAV,KAQvB+C,EAAuBhD,IAAOC,IAAV,KAQpBgD,EAAiBjD,IAAOC,IAAV,KCerBiD,EAAkBC,YAAyB,CAC/CC,UAAWC,IACXC,MAAOC,MAGMhD,sBAAQ2C,EAAR3C,EAhCM,SAAC,GAAD,IAAG6C,EAAH,EAAGA,UAAWE,EAAd,EAAcA,MAAd,OACnB,kBAACR,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,0CAEF,kBAACA,EAAD,KACE,8CAEF,kBAACA,EAAD,KACE,2CAEF,kBAACA,EAAD,KACE,wCAEF,kBAACA,EAAD,KACE,0CAGHI,EAAUI,KAAI,SAAC9C,GAAD,OACb,kBAAC,EAAD,CAAc+C,IAAK/C,EAASgD,GAAIhD,SAAUA,OAE5C,kBAACuC,EAAD,gBAAyBK,GACzB,kBAAC,EAAD,CAAsBrC,MAAOqC","file":"static/js/6.09a683db.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const CheckoutItemContainer = styled.div`\n  width: 100%;\n  display: flex;\n  min-height: 100px;\n  border-bottom: 1px solid darkgrey;\n  padding: 15px 0;\n  font-size: 20px;\n  align-items: center;\n`;\n\nexport const ImageContainer = styled.div`\n  width: 23%;\n  padding-right: 15px;\n  img {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nexport const TextContainer = styled.span`\n  width: 23%;\n`;\n\nexport const QuantityContainer = styled(TextContainer)`\n  display: flex;\n  span {\n    margin: 0 10px;\n  }\n  div {\n    cursor: pointer;\n  }\n`;\n\nexport const RemoveButtonContainer = styled.div`\n  padding-left: 12px;\n  cursor: pointer;\n`;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport {\n  clearItemFromCart,\n  addItem,\n  removeItem,\n} from \"../../redux/cart/cart.actions\";\n\n// import \"./checkout-item.styles.scss\";\n\nimport {\n  CheckoutItemContainer,\n  ImageContainer,\n  TextContainer,\n  QuantityContainer,\n  RemoveButtonContainer,\n} from \"./checkout-item.styles\";\n\nconst CheckoutItem = ({ cartItem, clearItem, addItem, removeItem }) => {\n  const { name, imageUrl, price, quantity } = cartItem;\n  return (\n    <CheckoutItemContainer>\n      <ImageContainer>\n        <img src={imageUrl} alt=\"item\" />\n      </ImageContainer>\n      <TextContainer>{name}</TextContainer>\n      <QuantityContainer>\n        <div onClick={() => removeItem(cartItem)}>&#10094;</div>\n        <span>{quantity}</span>\n        <div onClick={() => addItem(cartItem)}>&#10095;</div>\n      </QuantityContainer>\n      <TextContainer>{price}</TextContainer>\n      <RemoveButtonContainer onClick={() => clearItem(cartItem)}>\n        &#10005;\n      </RemoveButtonContainer>\n    </CheckoutItemContainer>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  clearItem: (cartItem) => dispatch(clearItemFromCart(cartItem)),\n  addItem: (item) => dispatch(addItem(item)),\n  removeItem: (item) => dispatch(removeItem(item)),\n});\n\nexport default connect(null, mapDispatchToProps)(CheckoutItem);\n","import React from \"react\";\nimport axios from \"axios\";\n\nimport StripeCheckout from \"react-stripe-checkout\";\n\nconst StripeCheckoutButton = ({ price }) => {\n  const priceForStripe = price * 100;\n  const publishableKey =\n    \"pk_test_51H3SU9KOlxyiaSD6DP8IhiaDAMC2MUCLACDhgdrJb2xiEzkbIdhdpmF5pTMrDqUdzfwjybdRJzHyKCZmTRCRc3RK00kO5dRNqA\";\n\n  const onToken = (token) => {\n    axios({\n      url: \"payment\",\n      method: \"post\",\n      data: {\n        amount: priceForStripe,\n        token: token,\n      },\n    })\n      .then((response) => {\n        alert(\"Payment successful\");\n      })\n      .catch((error) => {\n        console.log(\"Payment error: \", JSON.parse(error));\n        alert(\n          \"There was an issue with your payment. Please make sure you use the provided credit card\"\n        );\n      });\n  };\n\n  return (\n    <StripeCheckout\n      label=\"Pay Now\"\n      name=\"E-COMMERCE\"\n      billingAddress\n      shippingAddress\n      image=\"https://sendeyo.com/up/d/f3eb2117da\"\n      description={`Your total is $${price}`}\n      amount={priceForStripe}\n      panelLabel=\"Pay Now\"\n      token={onToken}\n      stripeKey={publishableKey}\n    />\n  );\n};\n\nexport default StripeCheckoutButton;\n","import styled from \"styled-components\";\n\nexport const CheckoutPageContainer = styled.div`\n  width: 55%;\n  min-height: 90vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 50px auto 0;\n  button {\n    margin-left: auto;\n    margin-top: 50px;\n  }\n`;\n\nexport const CheckoutHeaderContainer = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 1px solid darkgrey;\n`;\n\nexport const HeaderBlockContainer = styled.div`\n  text-transform: capitalize;\n  width: 23%;\n  &:last-child {\n    width: 8%;\n  }\n`;\n\nexport const TotalContainer = styled.div`\n  margin-top: 30px;\n  margin-left: auto;\n  font-size: 36px;\n`;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\n\nimport CheckoutItem from \"../../components/checkout-item/checkout-item.component\";\nimport StripeCheckoutButton from \"../../components/stripe-button/stripe-button.component\";\n\nimport {\n  selectCartItems,\n  selectCartTotal,\n} from \"../../redux/cart/cart.selectors\";\n\nimport {\n  CheckoutHeaderContainer,\n  CheckoutPageContainer,\n  HeaderBlockContainer,\n  TotalContainer,\n} from \"./checkout.styles\";\n\nconst CheckoutPage = ({ cartItems, total }) => (\n  <CheckoutPageContainer>\n    <CheckoutHeaderContainer>\n      <HeaderBlockContainer>\n        <span>Product</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Description</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Quantity</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Price</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Remove</span>\n      </HeaderBlockContainer>\n    </CheckoutHeaderContainer>\n    {cartItems.map((cartItem) => (\n      <CheckoutItem key={cartItem.id} cartItem={cartItem} />\n    ))}\n    <TotalContainer>TOTAL: ${total}</TotalContainer>\n    <StripeCheckoutButton price={total} />\n  </CheckoutPageContainer>\n);\n\nconst mapStateToProps = createStructuredSelector({\n  cartItems: selectCartItems,\n  total: selectCartTotal,\n});\n\nexport default connect(mapStateToProps)(CheckoutPage);\n"],"sourceRoot":""}